(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{420:function(s,t,a){"use strict";a.r(t);var e=a(56),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"optimization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimization"}},[s._v("#")]),s._v(" optimization")]),s._v(" "),a("p",[s._v("optimization 是webpack中非常重要的一个属性。通常情况下webpack的默认配置不能适用所有的项目。我们需要了解该配置下的一些重要属性，针对不同项目做出优化。")]),s._v(" "),a("h2",{attrs:{id:"chunkids-moduleids"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunkids-moduleids"}},[s._v("#")]),s._v(" chunkIds（moduleIds）")]),s._v(" "),a("p",[s._v("根据官方文档可知，推荐使用下述两值。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("开发模式下默认使用 "),a("code",[s._v("named")]),s._v("便于调试。\n"),a("img",{attrs:{src:s.$withBase("/images/webpack_config_chunkIds_1.png"),alt:"webpack_config_chunkIds"}})])]),s._v(" "),a("li",[a("p",[s._v("生产模式下默认使用"),a("code",[s._v("deterministic")]),s._v("利于缓存。\n"),a("img",{attrs:{src:s.$withBase("/images/webpack_config_chunkIds_2.png"),alt:"webpack_config_chunkIds"}})])])]),s._v(" "),a("h2",{attrs:{id:"concatenatemodules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concatenatemodules"}},[s._v("#")]),s._v(" concatenateModules")]),s._v(" "),a("p",[s._v("让webpack找到模块之间的依赖联系，把模块合并的同一个函数中，缩小代码体积。")]),s._v(" "),a("p",[s._v("函数关系如下：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/images/concatenateModules.png"),alt:"concatenateModules"}}),s._v(" "),a("p",[s._v("开启"),a("code",[s._v("concatenateModules")])]),s._v(" "),a("img",{attrs:{src:s.$withBase("/images/concatenateModules_true.png"),alt:"concatenateModules"}}),s._v(" "),a("p",[s._v("关闭"),a("code",[s._v("concatenateModules")])]),s._v(" "),a("img",{attrs:{src:s.$withBase("/images/concatenateModules_false.png"),alt:"concatenateModules"}}),s._v(" "),a("h2",{attrs:{id:"removeavailablemodules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removeavailablemodules"}},[s._v("#")]),s._v(" removeAvailableModules")]),s._v(" "),a("p",[s._v("改配置会降低webpack性能，在后续正式版本会默认关闭。")]),s._v(" "),a("h2",{attrs:{id:"runtimechunk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#runtimechunk"}},[s._v("#")]),s._v(" runtimeChunk")]),s._v(" "),a("p",[s._v("把运行时的代码提取出来生成一个公共的文件。但是任何一个运行时改动都会导致这个共文件hash闭环，导致缓存失效，所以建议关闭。")]),s._v(" "),a("h2",{attrs:{id:"sideeffects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sideeffects"}},[s._v("#")]),s._v(" sideEffects")]),s._v(" "),a("p",[s._v("待定")]),s._v(" "),a("h2",{attrs:{id:"splitchunks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks"}},[s._v("#")]),s._v(" splitChunks")]),s._v(" "),a("p",[s._v("配置webpack如何执行拆包策略。")]),s._v(" "),a("h3",{attrs:{id:"chunks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunks"}},[s._v("#")]),s._v(" chunks")]),s._v(" "),a("p",[s._v("决定那些包会被拆分优化。")]),s._v(" "),a("ol",[a("li",[s._v("设置为"),a("code",[s._v("initial")]),s._v("：")])]),s._v(" "),a("ul",[a("li",[s._v("在入口文件"),a("code",[s._v("index.js")]),s._v("中引入"),a("code",[s._v("lodash")]),s._v("，"),a("code",[s._v("lodash")]),s._v("被拆分。")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// index.js")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lodash'")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/images/splitChunks_1.png"),alt:"splitChunks_1"}}),s._v(" "),a("ul",[a("li",[s._v("在"),a("code",[s._v("index.js")]),s._v("中同步引入"),a("code",[s._v("data1.js")]),s._v("，"),a("code",[s._v("main.js")]),s._v("体积增加，"),a("code",[s._v("data1.js")]),s._v("未被拆分。")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// index.js")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lodash'")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" data1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./data1"')]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/images/splitChunks_2.png"),alt:"splitChunks_2"}}),s._v(" "),a("ul",[a("li",[s._v("在"),a("code",[s._v("index.js")]),s._v("中异步引入"),a("code",[s._v("data1.js")]),s._v("。可以看出"),a("code",[s._v("data1.js")]),s._v("中的数据被拆分。因为是异步引入，所以在解析"),a("code",[s._v("data1.js")]),s._v("时，作为新的入口文件进行拆分。")])]),s._v(" "),a("img",{attrs:{src:s.$withBase("/images/splitChunks_3.png"),alt:"splitChunks_3"}}),s._v(" "),a("ul",[a("li",[s._v("在"),a("code",[s._v("index.js")]),s._v("中异步引入"),a("code",[s._v("a.js")]),s._v("和"),a("code",[s._v("b.js")]),s._v(","),a("code",[s._v("a.js")]),s._v("和"),a("code",[s._v("b.js")]),s._v("分别同步引入"),a("code",[s._v("data1.js")]),s._v("。可以看出拆出了两个文件"),a("code",[s._v("src_a_js.js")]),s._v("和"),a("code",[s._v("src_b_js.js")]),s._v(",这两个文件均包含"),a("code",[s._v("data1.js")]),s._v("的数据，出现了重复代码。")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// index.js")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lodash'")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./a.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./b.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a.js b.js")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" data1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./data1"')]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/images/splitChunks_4.png"),alt:"splitChunks_4"}}),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("设置为"),a("code",[s._v("async")]),s._v("可以看到，"),a("code",[s._v("lodash")]),s._v("未被拆分，"),a("code",[s._v("data1.js")]),s._v("从两个异步引入的文件中被拆分。")])]),s._v(" "),a("img",{attrs:{src:s.$withBase("/images/splitChunks_5.png"),alt:"splitChunks_5"}}),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[s._v("设置为"),a("code",[s._v("all")]),s._v("。可以看到"),a("code",[s._v("loadsh")]),s._v("被拆分，"),a("code",[s._v("data1.js")]),s._v("从两个异步引入的文件中被拆分。")])]),s._v(" "),a("img",{attrs:{src:s.$withBase("/images/splitChunks_6.png"),alt:"splitChunks_6"}}),s._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[s._v("总结：")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("initial")]),s._v(" 可以把入口文件中的node_modules代码提取出来，不能提取直接引入入口文件中的js。可以减少vendor文件的大小，但是会出现重复的代码。")]),s._v(" "),a("li",[a("code",[s._v("async")]),s._v(" 可以把所有异步的代码提取出来。")]),s._v(" "),a("li",[a("code",[s._v("all")]),s._v(" 同时具备initial和async的特性。")]),s._v(" "),a("li",[s._v("通常使用"),a("code",[s._v("all")]),s._v("会有更好的拆分效果")])])])}),[],!1,null,null,null);t.default=n.exports}}]);